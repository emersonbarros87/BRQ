{"ast":null,"code":"import { BehaviorSubject, EMPTY } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/material/snack-bar\";\nexport let Service = /*#__PURE__*/(() => {\n  class Service {\n    constructor(http, snackBar) {\n      this.http = http;\n      this.snackBar = snackBar;\n      this._headerData = new BehaviorSubject({\n        routeUrl: ''\n      });\n      this.baseUrl = 'https://app-brq-backend.herokuapp.com/users';\n    }\n\n    get headerData() {\n      return this._headerData.value;\n    }\n\n    set headerData(headerData) {\n      this._headerData.next(headerData);\n    }\n\n    showMensage(msg, isError = false) {\n      this.snackBar.open(msg, 'X', {\n        duration: 2000,\n        horizontalPosition: 'center',\n        verticalPosition: 'top',\n        panelClass: isError ? ['msg-error'] : ['msg-success']\n      });\n    }\n\n    create(client) {\n      return this.http.post(this.baseUrl, client).pipe(map(obj => obj), catchError(error => this.errorHandler(error)));\n    }\n\n    read() {\n      return this.http.get(this.baseUrl).pipe(map(obj => obj), catchError(error => this.errorHandler(error)));\n    }\n\n    readById(id) {\n      const urlRead = `${this.baseUrl}/${id}`;\n      return this.http.get(urlRead).pipe(map(obj => obj), catchError(error => this.errorHandler(error)));\n    }\n\n    update(user) {\n      const urlUpdate = `${this.baseUrl}/${user.id}`;\n      return this.http.put(urlUpdate, user).pipe(map(obj => obj), catchError(error => this.errorHandler(error)));\n    }\n\n    delete(user) {\n      const urlDelete = `${this.baseUrl}/${user.id}`;\n      return this.http.delete(urlDelete).pipe(map(obj => obj), catchError(error => this.errorHandler(error)));\n    }\n\n    profileList(user) {\n      const urlList = `${this.baseUrl}/${user.id}`;\n      return this.http.get(urlList).pipe(map(obj => obj), catchError(error => this.errorHandler(error)));\n    }\n\n    errorHandler(error) {\n      console.log('Ocorreu um erro!', true);\n      return EMPTY;\n    }\n\n  }\n\n  Service.ɵfac = function Service_Factory(t) {\n    return new (t || Service)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.MatSnackBar));\n  };\n\n  Service.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: Service,\n    factory: Service.ɵfac,\n    providedIn: 'root'\n  });\n  return Service;\n})();","map":null,"metadata":{},"sourceType":"module"}